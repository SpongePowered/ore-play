openapi: 3.0.0
info:
  title: "Ore API"
  description: >-

    This page describes the format for the current Ore REST API, in addition
    to common questions when using it. Note that anything that starts with `_`
    should be considered internal, and can change at a moment's notice. Do not
    use it.

    ## Authentication and authorization

    There are two ways to consume the API. Keyless, and using an API key.

    ### Keyless

    When using keyless authentication you only get access to public
    information, but don't need to worry about creating and storing an API key.

    ### API Keys

    If you need access to non-public actions, or want to do something
    programatically, you likely want an API key. These can be created by going
    to your user page and clicking on the key icon.

    ### Authentication

    Once you know how you want to authenticate you need to create a session.
    You can do this by `POST`ing to `/authenticate`. If you're using keyless
    authentication that's it. If you have an API key, you need to specify it
    in the Authorization header like so `Authorization: OreApi apikey="foobar"`.

    ### Authorization

    Once you do that you should receive an session. This is valid for a
    pre-defined set of time. When it expires, you need to authenticate again.
    To use it, set it in the Authorization header like
    so `Authorization: OreApi session="noisses"`.

    For more info about authentication, see [here](#/Authentification/authenticate).

    ## FAQ

    ### Can I just change v1 to v2 and be done with the transition to the new API?

    No, not at all. The new API is wildly different from the old API. You won't even get out the door.

    ### Why do I need to create a new session when I just want to get some public info?

    We're working on a session-less authentification for public endpoints.

    ### What format does dates have?

    Standard ISO types. Where possible we use the OpenAPI format modifier. You
    can view it's meanings [here](https://swagger.io/docs/specification/data-models/data-types/#format).


servers:
  - url: /api/v2

components:
  schemas:
    DeployVersionInfo:
      description: >-
        DeployVersionInfo.

        Information about the version to create. Can be passed either as a
        file, or a string.
      properties:
        create_forum_post:
          type: boolean
          description: >-
            If a post should be made on the forums after this version has
            been published.
        description:
          type: string
          description: >-
            The version description to post on both the version,
            and the forum post.
        stability:
          $ref: '#/components/schemas/Stability'
        release_type:
          $ref: '#/components/schemas/ReleaseType'
    NamedPermission:
      type: string
      enum:
        - view_public_info
        - edit_own_user_settings
        - edit_api_keys
        - edit_subject_settings
        - manage_subject_members
        - is_subject_owner
        - create_project
        - edit_page
        - delete_project
        - create_version
        - edit_version
        - delete_version
        - edit_tags
        - create_organization
        - post_as_organization
        - mod_notes_and_flags
        - see_hidden
        - is_staff
        - reviewer
        - view_health
        - view_ip
        - view_stats
        - view_logs
        - manual_value_changes
        - hard_delete_project
        - hard_delete_version
        - edit_all_user_settings
    Category:
      type: string
      enum:
        - admin_tools
        - chat
        - dev_tools
        - economy
        - gameplay
        - games
        - protection
        - role_playing
        - world_management
        - misc
    Visibility:
      type: string
      enum:
        - public
        - new
        - needsChanges
        - needsApproval
        - softDelete
    ReviewState:
      type: string
      enum:
        - unreviewed
        - reviewed
        - backlog
        - partially_reviewed
    ApiScopeType:
      type: string
      enum:
        - global
        - project
        - organization
    SessionType:
      type: string
      enum:
        - key
        - user
        - public
        - dev
    ProjectSortingStrategy:
      type: string
      enum:
        - stars
        - downloads
        - views
        - newest
        - updated
        - only_relevance
        - recent_downloads
        - recent_views
    Stability:
      type: string
      enum:
        - recommended
        - stable
        - beta
        - alpha
        - bleeding
        - unsupported
        - broken
    ReleaseType:
      type: string
      enum:
        - major_update
        - minor_update
        - patches
        - hotfix
    Role:
      type: string
      enum:
        - Ore_Admin
        - Ore_Mod
        - Sponge_Leader
        - Team_Leader
        - Community_Leader
        - Sponge_Staff
        - Sponge_Developer
        - Ore_Dev
        - Web_Dev
        - Documenter
        - Support
        - Contributor
        - Advisor
        - Stone_Donor
        - Quartz_Donor
        - Iron_Donor
        - Gold_Donor
        - Diamond_Donor
        - Project_Owner
        - Project_Admin
        - Project_Developer
        - Project_Editor
        - Project_Support
        - Organization
        - Organization_Owner
        - Organization_Admin
        - Organization_Developer
        - Organization_Editor
        - Organization_Support
    UserSortingStrategy:
      type: string
      enum:
        - name
        - join_date
        - project_count
    models.protocols.APIV2.VersionExternal:
      title: VersionExternal
    models.protocols.APIV2.PageListEntry:
      title: PageListEntry
    models.protocols.APIV2.ProjectLicense:
      title: ProjectLicense
    models.protocols.APIV2.VersionTags:
      title: VersionTags
    controllers.apiv2.Users.PaginatedUserResult:
      title: PaginatedUserResult
    models.protocols.APIV2.Organization:
      title: Organization
    models.protocols.APIV2.CompactProject:
      title: CompactProject
    controllers.apiv2.helpers.Pagination:
      title: Pagination
    models.protocols.APIV2.Membership:
      title: Membership
    models.protocols.APIV2.UserActions:
      title: UserActions
    models.protocols.APIV2.User:
      title: User
    models.protocols.APIV2.MembershipProject:
      title: MembershipProject
    models.protocols.APIV2.VersionPlatform:
      title: VersionPlatform
    models.protocols.APIV2.PageList:
      title: PageList
    controllers.apiv2.Keys.CreatedApiKey:
      title: CreatedApiKey
    models.protocols.APIV2.ProjectNamespace:
      title: ProjectNamespace
    models.protocols.APIV2.FileInfo:
      title: FileInfo
    controllers.apiv2.Permissions.KeyPermissions:
      title: KeyPermissions
    models.protocols.APIV2.VersionStatsDay:
      title: VersionStatsDay
    controllers.apiv2.Authentication.ReturnedApiSession:
      title: ReturnedApiSession
    models.protocols.APIV2.Member:
      title: Member
    controllers.apiv2.Keys.KeyToCreate:
      title: KeyToCreate
    models.protocols.APIV2.ProjectExternalDiscourse:
      title: ProjectExternalDiscourse
    controllers.apiv2.Projects.PaginatedProjectResult:
      title: PaginatedProjectResult
    models.protocols.APIV2.VersionStatsAll:
      title: VersionStatsAll
    models.protocols.APIV2.Project:
      title: Project
    models.protocols.APIV2.Role:
      title: Role
    controllers.apiv2.helpers.Members.MemberUpdate:
      title: MemberUpdate
    controllers.apiv2.Versions.PaginatedVersionResult:
      title: PaginatedVersionResult
    controllers.apiv2.Versions.SimplePlatform:
      title: SimplePlatform
    models.protocols.APIV2.VersionExternalDiscourse:
      title: VersionExternalDiscourse
    controllers.apiv2.Permissions.PermissionCheck:
      title: PermissionCheck
    models.protocols.APIV2.PromotedVersion:
      title: PromotedVersion
    models.protocols.APIV2.ProjectExternal:
      title: ProjectExternal
    models.protocols.APIV2.VersionChangelog:
      title: VersionChangelog
    controllers.apiv2.Projects.ApiV2ProjectTemplate:
      title: ApiV2ProjectTemplate
    models.protocols.APIV2.Page:
      title: Page
    models.protocols.APIV2.VersionDependency:
      title: VersionDependency
    models.protocols.APIV2.ProjectSettings:
      title: ProjectSettings
    models.protocols.APIV2.ProjectStatsDay:
      title: ProjectStatsDay
    controllers.apiv2.Projects.DiscourseModifyTopicSettings:
      title: DiscourseModifyTopicSettings
    controllers.apiv2.helpers.EditVisibility:
      title: DiscourseModifyTopicSettings
    models.protocols.APIV2.ProjectStatsAll:
      title: ProjectStatsAll
    controllers.apiv2.Users.PaginatedCompactProjectResult:
      title: PaginatedCompactProjectResult
    models.protocols.APIV2.Version:
      title: Version
    controllers.apiv2.Versions.DiscourseModifyPostSettings:
      title: DiscourseModifyPostSettings
    controllers.apiv2.Authentication.ApiSessionProperties:
      title: ApiSessionProperties
      example:
        expires_in: 600
    models.protocols.APIV2.MembershipOrganization:
      title: MembershipOrganization
  securitySchemes:
    Session:
      type: http
      scheme: OreApi
      description: >-
        Authentication using an API session. The session is passed as part of the
        Authorization header in the form `Authorization: OreApi session="<my session here>"`.
        You can get a session from the authentication endpoint.
    Key:
      type: http
      scheme: OreApi
      description: >-
        Authentication using an API key. This should in most cases not be a
        request that you execute repeatedly. The key is passed as part of the
        Authorization header in the form `Authorization: OreApi apikey="<my key here>"`.
        You can get an API key either from the web interface, or using the
        create key endpoint with a more powerful key.
  responses:
    UnauthorizedError:
      description: Api session missing, invalid or expired
      headers:
        WWW_Authenticate:
          schema:
            type: string
    ForbiddenError:
      description: Not enough permissions to use this endpoint

security:
  - Session: []
