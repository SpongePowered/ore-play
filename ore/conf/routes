# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /*path/                                                     @controllers.Application.removeTrail(path)
GET     /assets/*file                                               controllers.Assets.versioned(path="/public", file: Asset)
GET     /favicon.ico                                                @controllers.Application.faviconRedirect()

# ---------- Admin ----------

GET     /admin/user/:user                                           @controllers.Application.userAdmin(user)
POST    /admin/user/:user/update                                    @controllers.Application.updateUser(user)
GET     /admin/approval/versions                                    @controllers.Application.showQueue()
GET     /admin/approval/projects                                    @controllers.Application.showProjectVisibility()
GET     /admin/flags                                                @controllers.Application.showFlags()
GET     /admin/flags/:id/resolve/:resolved                          @controllers.Application.setFlagResolved(id: DbRef[Flag], resolved: Boolean)
GET     /admin/health                                               @controllers.Application.showHealth()
GET     /admin/activities/:user                                     @controllers.Application.showActivities(user: String)
GET     /admin/stats                                                @controllers.Application.showStats(from: Option[String], to: Option[String])
GET     /admin/log                                                  @controllers.Application.showLog(page: Option[Int], userFilter: Option[String], projectFilter: Option[String], versionFilter: Option[String], pageFilter: Option[DbRef[Page]], actionFilter: Option[String], subjectFilter: Option[String])

GET     /statusz                                                    @controllers.ApiV1Controller.showStatusZ()

GET     /pantopticon/actor-tree                                     @controllers.Application.actorTree(timeoutMs: Long ?= 2000)
GET     /pantopticon/actor-count                                    @controllers.Application.actorCount(timeoutMs: Long ?= 2000)

# ---------- API (v1) ----------
+nocsrf
POST    /api/sync_sso                                               @controllers.ApiV1Controller.syncSso()

GET     /api/v1/projects/:pluginId/keys                             @controllers.ApiV1Controller.getKey(pluginId)
POST    /api/v1/projects/:pluginId/keys/new                         @controllers.ApiV1Controller.createKey(pluginId)
POST    /api/v1/projects/:pluginId/keys/revoke                      @controllers.ApiV1Controller.revokeKey(pluginId)

GET     /api/projects/:pluginId/versions/recommended/download       @controllers.project.Versions.downloadRecommendedJarById(pluginId, token: Option[String])
GET     /api/projects/:pluginId/versions/:name/download             @controllers.project.Versions.downloadJarById(pluginId, name, token: Option[String])
GET     /api/v1/projects/:pluginId/versions/recommended/download    @controllers.project.Versions.downloadRecommendedJarById(pluginId, token: Option[String])
GET     /api/v1/projects/:pluginId/versions/:name/download          @controllers.project.Versions.downloadJarById(pluginId, name, token: Option[String])

GET     /api/v1/projects                                            @controllers.ApiV1Controller.listProjects(categories: Option[String], sort: Option[Int], q: Option[String], limit: Option[Long], offset: Option[Long])
GET     /api/v1/projects/:pluginId                                  @controllers.ApiV1Controller.showProject(pluginId)

GET     /api/v1/projects/:pluginId/versions                         @controllers.ApiV1Controller.listVersions(pluginId, channels: Option[String], limit: Option[Int], offset: Option[Int])
GET     /api/v1/projects/:pluginId/versions/:name                   @controllers.ApiV1Controller.showVersion(pluginId, name)
POST    /api/v1/projects/:pluginId/versions/:name                   @controllers.ApiV1Controller.deployVersion(pluginId, name)

GET     /api/v1/projects/:pluginId/pages                            @controllers.ApiV1Controller.listPages(pluginId, parentId: Option[DbRef[Page]])

GET     /api/v1/users                                               @controllers.ApiV1Controller.listUsers(limit: Option[Int], offset: Option[Int])
GET     /api/v1/users/:user                                         @controllers.ApiV1Controller.showUser(user)

GET     /api/v1/projects/:plugin/tags/:versionName                  @controllers.ApiV1Controller.listTags(plugin, versionName)
GET     /api/v1/tags/:tagId                                         @controllers.ApiV1Controller.tagColor(tagId)

GET     /api                                                        @controllers.Application.swagger()
->      /api/v2                                                     apiv2.Routes

# ---------- Application ----------

GET     /                                                           @controllers.Application.showHome()
GET     /linkout                                                    @controllers.Application.linkOut(remoteUrl: String)
GET     /signup                                                     @controllers.Users.signUp()
GET     /login                                                      @controllers.Users.logIn(sso: Option[String], sig: Option[String], returnUrl: Option[String])
GET     /logout                                                     @controllers.Users.logOut()
POST    /verify                                                     @controllers.Users.verify(returnPath: Option[String])
GET     /javascriptRoutes                                           @controllers.Application.javascriptRoutes
GET     /global-sitemap.xml                                         @controllers.Application.globalSitemap
GET     /sitemap.xml                                                @controllers.Application.sitemapIndex()
GET     /robots.txt                                                 @controllers.Application.robots()

# ---------- Projects ----------

GET     /projects/new                                               @controllers.Application.showHome()
POST    /invite/:id/:status                                         @controllers.project.Projects.setInviteStatus(id: DbRef[ProjectUserRole], status)
POST    /invite/:id/:status/:behalf                                 @controllers.project.Projects.setInviteStatusOnBehalf(id: DbRef[ProjectUserRole], status: String, behalf: String)

# ---------- Organizations ----------

GET     /organizations/new                                          @controllers.Organizations.showCreator()
POST    /organizations/new                                          @controllers.Organizations.create()

POST    /organizations/invite/:id/:status                           @controllers.Organizations.setInviteStatus(id: DbRef[OrganizationUserRole], status)

GET     /organizations/:organization/settings/avatar                @controllers.Organizations.updateAvatar(organization)
POST    /organizations/:organization/settings/members               @controllers.Organizations.updateMembers(organization)
POST    /organizations/:organization/settings/members/remove        @controllers.Organizations.removeMember(organization)

# ---------- Users ----------
GET     /authors                                                    @controllers.Users.showAuthors(sort: Option[String], page: Option[Int])
GET     /staff                                                      @controllers.Users.showStaff(sort: Option[String], page: Option[Int])

GET     /notifications                                              @controllers.Users.showNotifications(notificationFilter: Option[String], inviteFilter: Option[String])
POST    /notifications/read/:id                                     @controllers.Users.markNotificationRead(id: DbRef[Notification])

POST    /prompts/read/:id                                           @controllers.Users.markPromptRead(id: Int)

GET     /$user<.\w[\w.-]+[A-Za-z0-9](?<!\.js|\.json|\.css|\.htm|\.html|\.xml|\.jpg|\.jpeg|\.png|\.gif|\.bmp|\.ico|\.tif|\.tiff|\.woff)$>                                                      @controllers.Users.showProjects(user)
GET     /:user/sitemap.xml                                          @controllers.Users.userSitemap(user)
POST    /:user/settings/tagline                                     @controllers.Users.saveTagline(user)
GET     /:user/settings/apiKeys                                     @controllers.Users.editApiKeys(user)
# -------- End Users --------

GET     /:author/:slug                                              @controllers.project.Projects.show(author, slug, vuePage = "")
GET     /:author/:slug/stars                                        @controllers.project.Projects.showStargazers(author, slug, page: Option[Int])
POST    /:author/:slug/stars/toggle                                 @controllers.project.Projects.toggleStarred(author, slug)
POST    /:author/:slug/flag                                         @controllers.project.Projects.flag(author, slug)
GET     /:author/:slug/watchers                                     @controllers.project.Projects.showWatchers(author, slug, page: Option[Int])
POST    /:author/:slug/watchers/:watching                           @controllers.project.Projects.setWatching(author, slug, watching: Boolean)

GET     /:author/:slug/manage/sendforapproval                       @controllers.project.Projects.sendForApproval(author, slug)

GET     /:author/:slug/versionLog                                   @controllers.project.Versions.showLog(author, slug, versionString)
GET     /:author/:slug/flags                                        @controllers.project.Projects.showFlags(author, slug)
GET     /:author/:slug/notes                                        @controllers.project.Projects.showNotes(author, slug)
POST    /:author/:slug/notes/addmessage                             @controllers.project.Projects.addMessage(author, slug)

GET     /:author/:slug/icon                                         @controllers.project.Projects.showIcon(author, slug)
+nocsrf
POST    /:author/:slug/icon                                         @controllers.project.Projects.uploadIcon(author, slug)
POST    /:author/:slug/icon/reset                                   @controllers.project.Projects.resetIcon(author, slug)
# ------- End Projects ---------


# ---------- Versions ----------

GET     /:author/:slug/versions/:version/confirm                    @controllers.project.Versions.showDownloadConfirm(author, slug, version, downloadType: Option[Int], api: Option[Boolean], dummy: Option[String])
+nocsrf
POST    /:author/:slug/versions/:version/confirm                    @controllers.project.Versions.confirmDownload(author, slug, version, downloadType: Option[Int], token: Option[String], dummy: Option[String])

GET     /:author/:slug/versions/recommended/download                @controllers.project.Versions.downloadRecommended(author, slug, token: Option[String])
GET     /:author/:slug/versions/:version/download                   @controllers.project.Versions.download(author, slug, version, token: Option[String], confirm: Boolean ?= false)

GET     /:author/:slug/versions/recommended/jar                     @controllers.project.Versions.downloadRecommendedJar(author, slug, token: Option[String])
GET     /:author/:slug/versions/:version/jar                        @controllers.project.Versions.downloadJar(author, slug, version, token: Option[String])

# ---------- Reviews ----------
GET     /:author/:slug/versions/:version/reviews                    @controllers.Reviews.showReviews(author, slug, version)
POST    /:author/:slug/versions/:version/reviews/init               @controllers.Reviews.createReview(author, slug, version)
POST    /:author/:slug/versions/:version/reviews/stop               @controllers.Reviews.stopReview(author, slug, version)
POST    /:author/:slug/versions/:version/reviews/approve            @controllers.Reviews.approveReview(author, slug, version)
POST    /:author/:slug/versions/:version/reviews/takeover           @controllers.Reviews.takeoverReview(author, slug, version)
POST    /:author/:slug/versions/:version/reviews/addmessage         @controllers.Reviews.addMessage(author, slug, version)
POST    /:author/:slug/versions/:version/reviews/edit/:review       @controllers.Reviews.editReview(author, slug, version, review: DbRef[Review])
POST    /:author/:slug/versions/:version/reviews/reopen             @controllers.Reviews.reopenReview(author, slug, version)
POST    /:author/:slug/versions/:version/reviews/reviewtoggle       @controllers.Reviews.backlogToggle(author, slug, version)

GET     /:author/:slug/*vuePage                                     @controllers.project.Projects.show(author, slug, vuePage)
